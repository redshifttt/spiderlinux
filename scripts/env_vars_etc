#!/usr/bin/env bash

set -e
set -o pipefail

BASE_DIR=/home/sean/files/docs/projects/spiderlinux
SOURCES_DIR=$BASE_DIR/scripts/sources
SPIDER_ROOT=$BASE_DIR/base
TARGET_TRIPLET=x86_64-spider-linux-gnu
BUILD_TRIPLET=x86_64-pc-linux-gnu

export PATH="/usr/lib/ccache/bin:$SPIDER_ROOT/toolchain/bin:$PATH"

# Usually you shouldn't set compiler optimisation flags but these
# should be considered safe as per the Gentoo Wiki (https://wiki.gentoo.org/wiki/Safe_CFLAGS)
COMMON_FLAGS="-march=native -O2 -pipe"
export CFLAGS="${COMMON_FLAGS}"
export CXXFLAGS="${COMMON_FLAGS}"
JOBS="-j$(nproc)" # total number of cores

run() {
    printf '\033[35;1m=>\033[0m \033[1m%s\033[0m\n' "$*"
    "$@" || return "${_ret:=0}"
}

# Wrapper around the usual fd and cd we used to do
get_source_path(){ echo $(fd "$1" "$SOURCES_DIR" -t d -d 1) ;}
goto_sources(){ run cd "$(get_source_path "$1")" ;}

make_build_dir(){
    if [[ -d "build" ]]; then
        run sudo rm -rf build/
        run mkdir build/
        run cd build/
    else
        run mkdir build/
        run cd build/
    fi
}

# Only really useful for gcc but DRY (https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)
create_gcc_dep_dirs(){
    run sudo rm -rf mpfr gmp mpc 2>/dev/null
    run sudo tar -xf ../mpfr-*.tar.xz && run mv -v mpfr-*/ mpfr
    run sudo tar -xf ../gmp-*.tar.xz && run mv -v gmp-*/ gmp
    run sudo tar -xf ../mpc-*.tar.gz && run mv -v mpc-*/ mpc
}

make_install(){
    run sudo make $JOBS
    run sudo make install $JOBS
}
make_install_destdir(){
    run sudo make $JOBS
    run sudo make DESTDIR=$1 install $JOBS
}
