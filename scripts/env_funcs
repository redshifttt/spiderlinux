#!/usr/bin/env bash

set -e
set -o pipefail

# Terminology:
# prefix: the toplevel installation directory
# sysroot: tells gcc "dir" will be the root in the filesystem of the target operating system. seems to be used for the second pass compiler that will run on the target system.
# host: the system where you want to run the resulting compiler (normally the build machine)
# build: the system which you are using
# target: the system for which you want the compiler to generate code

BASE_DIR=/home/sean/files/docs/projects/spiderlinux
SOURCES_DIR=$BASE_DIR/scripts/sources
SPIDER_ROOT=$BASE_DIR/base
TARGET_TRIPLET=x86_64-spider-linux-gnu
BUILD_TRIPLET=x86_64-pc-linux-gnu

export PATH="/usr/lib/ccache/bin:$BASE_DIR/toolchain/bin:$PATH"

current_file=$(basename $0)

# Usually you shouldn't set compiler optimisation flags but these
# should be considered safe as per the Gentoo Wiki (https://wiki.gentoo.org/wiki/Safe_CFLAGS)
COMMON_FLAGS="-march=native -O2 -pipe"
export CFLAGS="${COMMON_FLAGS}"
export CXXFLAGS="${COMMON_FLAGS}"
JOBS="-j$(nproc)" # total number of cores

# Wrapper around the usual fd and cd we used to do
get_source_path(){ echo $(fd "$1" "$SOURCES_DIR" -t d -d 1) ;}
goto_sources(){ cd "$(get_source_path "$1")" ;}

make_build_dir(){
    if [[ -d "build" ]]; then
        sudo rm -rf build
        mkdir -p build
        cd build
    else
        mkdir -p build
        cd build
    fi
}

# Only really useful for gcc but DRY (https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)
create_gcc_dep_dirs(){
    sudo rm -rf mpfr gmp mpc 2>/dev/null
    tar -xf ../mpfr-4.1.0.tar.xz && mv -v mpfr-4.1.0 mpfr
    tar -xf ../gmp-6.2.1.tar.xz && mv -v gmp-6.2.1 gmp
    tar -xf ../mpc-1.2.1.tar.gz && mv -v mpc-1.2.1 mpc
}

make_install(){
    sudo make $JOBS
    sudo make install $JOBS
}
make_install_destdir(){
    sudo make $JOBS
    sudo make DESTDIR=$1 install $JOBS
}
