#!/usr/bin/sh

#=====================================================================
# This script implies that the sources needed to build
# the GCC toolchain are already downloaded and untarred. You
# should build the dependencies to make the cross compiler with
# your system compiler.
#=====================================================================

# Terminology:
# prefix: the toplevel installation directory
# sysroot: tells gcc "dir" will be the root in the filesystem of the target operating system. seems to be used for the second pass compiler that will run on the target system.
# host: the system where you want to run the resulting compiler (normally the build machine)
# build: the system which you are using
# target: the system for which you want the compiler to generate code

SOURCES_DIR=/programs_to_build
HOST_TRIPLET=x86_64-spider-linux-gnu

# Usually you shouldn't set compiler optimisation flags but these
# should be considered safe as per the Gentoo Wiki (https://wiki.gentoo.org/wiki/Safe_CFLAGS)
# COMMON_FLAGS="-march=x86-64 -O2 -pipe"
# export CFLAGS="${COMMON_FLAGS}"
# export CXXFLAGS="${COMMON_FLAGS}"
JOBS="-j$(nproc)" # total number of cores

# garbage_disposal(){ echo "Build killed. Cleaning..." && ./clean ;}
# trap garbage_disposal INT

# Wrapper around the usual fd and cd we used to do
get_source_path(){ echo $(find "$SOURCES_DIR" -maxdepth 1 -name "$1*" -type d) ;}
goto_sources(){ cd "$(get_source_path "$1")" ;}

make_build_dir(){
    if [[ -d "build" ]]; then
        sudo rm -rf build
        mkdir -p build
        cd build
    else
        mkdir -p build
        cd build
    fi
}

# Only really useful for gcc but DRY (https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)
create_gcc_dep_dirs(){
    sudo rm -rf mpfr gmp mpc 2>/dev/null
    tar -xf ../mpfr-4.1.0.tar.xz && mv -v mpfr-4.1.0 mpfr
    tar -xf ../gmp-6.2.1.tar.xz && mv -v gmp-6.2.1 gmp
    tar -xf ../mpc-1.2.1.tar.gz && mv -v mpc-1.2.1 mpc
}

# --------------------------------------------------------------------------------------------------------------

### libstdc++ 2

goto_sources gcc

create_gcc_dep_dirs

ln -s gthr-posix.h libgcc/gthr-default.h

make_build_dir

../libstdc++-v3/configure            \
    CXXFLAGS="-g -O2 -D_GNU_SOURCE"  \
    --prefix=/usr                    \
    --disable-multilib               \
    --disable-nls                    \
    --host=$HOST_TRIPLET \
    --disable-libstdcxx-pch

make $JOBS
make install $JOBS

### glibc 2

goto_sources glibc

sed -e '/NOTIFY_REMOVED)/s/)/ \&\& data.attr != NULL)/' -i sysdeps/unix/sysv/linux/mq_notify.c

make_build_dir

echo "rootsbindir=/usr/bin" > configparms

../configure \
    --prefix=/usr                            \
    --disable-werror                         \
    --enable-kernel=3.2                      \
    --enable-stack-protector=strong          \
    --with-headers=/usr/include              \
    libc_cv_slibdir=/usr/lib

make $JOBS
make check

touch /etc/ld.so.conf
sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile

make install $JOBS

sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd
cp -v ../nscd/nscd.conf /etc/nscd.conf
mkdir -pv /var/cache/nscd
install -v -Dm644 ../nscd/nscd.tmpfiles /usr/lib/tmpfiles.d/nscd.conf
install -v -Dm644 ../nscd/nscd.service /usr/lib/systemd/system/nscd.service

### zlib

goto_sources zlib

./configure \
    --prefix=/usr

make $JOBS
make check $JOBS
make install $JOBS
rm -fv /usr/lib/libz.a

### gcc 3

goto_sources gcc

create_gcc_dep_dirs

sed -e '/static.*SIGSTKSZ/d' \
    -e 's/return kAltStackSize/return SIGSTKSZ * 4/' \
    -i libsanitizer/sanitizer_common/sanitizer_posix_libcdep.cpp

make_build_dir

../configure \
    --prefix=/usr            \
    LD=ld                    \
    --enable-languages=c,c++ \
    --disable-multilib       \
    --disable-bootstrap      \
    --with-system-zlib

make $JOBS
ulimit -s 32768
../contrib/test_summary
make install $JOBS
rm -rf /usr/lib/gcc/$(gcc -dumpmachine)/11.2.0/include-fixed/bits/
ln -sv /usr/bin/cpp /usr/lib/cpp
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/11.2.0/liblto_plugin.so /usr/lib/bfd-plugins/
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

### gzip 2

goto_sources gzip

./configure \
    --prefix=/usr

make $JOBS
make check
make install $JOBS

### bzip

goto_sources bzip

sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile

make -f Makefile-libbz2_so $JOBS
make clean $JOBS
make $JOBS
make PREFIX=/usr install $JOBS

cp -av libbz2.so.* /usr/lib
ln -sv libbz2.so.1.0.8 /usr/lib/libbz2.so

cp -v bzip2-shared /usr/bin/bzip2
for i in /usr/bin/{bzcat,bunzip2}; do
  ln -sfv bzip2 $i
done

rm -fv /usr/lib/libbz2.a

### perl

goto_sources perl

sh Configure \
    -des                                        \
    -Dprefix=/usr                               \
    -Dvendorprefix=/usr                         \
    -Dprivlib=/usr/lib/perl5/5.34/core_perl     \
    -Darchlib=/usr/lib/perl5/5.34/core_perl     \
    -Dsitelib=/usr/lib/perl5/5.34/site_perl     \
    -Dsitearch=/usr/lib/perl5/5.34/site_perl    \
    -Dvendorlib=/usr/lib/perl5/5.34/vendor_perl \
    -Dvendorarch=/usr/lib/perl5/5.34/vendor_perl

make $JOBS
make install $JOBS

### bison

goto_sources bison

./configure \
    --prefix=/usr \
    --docdir=/usr/share/doc/bison-3.7.6

make $JOBS
make install $JOBS

## flex

goto_sources flex

./configure \
    --prefix=/usr \
    --docdir=/usr/share/doc/flex-2.6.4 \
    --disable-static

make $JOBS
make check
make install $JOBS

### ncurses 2

./configure \
    --prefix=/usr           \
    --mandir=/usr/share/man \
    --with-shared           \
    --without-debug         \
    --without-normal        \
    --enable-pc-files       \
    --enable-widec

make $JOBS
make install $JOBS

for lib in ncurses form panel menu ; do
    rm -vf                    /usr/lib/lib${lib}.so
    echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
    ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
done

rm -vf                     /usr/lib/libcursesw.so
echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
ln -sfv libncurses.so      /usr/lib/libcurses.so

rm -fv /usr/lib/libncurses++w.a

### m4 2

goto_sources m4

./configure \
    --prefix=/usr

make $JOBS
make install $JOBS

### perl 2

goto_sources perl

export BUILD_ZLIB=False
export BUILD_BZIP2=0

sh Configure \
    -des                                         \
    -Dprefix=/usr                                \
    -Dvendorprefix=/usr                          \
    -Dprivlib=/usr/lib/perl5/5.34/core_perl      \
    -Darchlib=/usr/lib/perl5/5.34/core_perl      \
    -Dsitelib=/usr/lib/perl5/5.34/site_perl      \
    -Dsitearch=/usr/lib/perl5/5.34/site_perl     \
    -Dvendorlib=/usr/lib/perl5/5.34/vendor_perl  \
    -Dvendorarch=/usr/lib/perl5/5.34/vendor_perl \
    -Dman1dir=/usr/share/man/man1                \
    -Dman3dir=/usr/share/man/man3                \
    -Dpager="/usr/bin/less -isR"                 \
    -Duseshrplib                                 \
    -Dusethreads

make $JOBS
make test $JOBS
make install $JOBS
unset BUILD_ZLIB BUILD_BZIP2

### openssl

goto_sources openssl

./config \
    --prefix=/usr         \
    --openssldir=/etc/ssl \
    --libdir=lib          \
    shared                \
    zlib-dynamic

make
make test

sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' Makefile
make MANSUFFIX=ssl install

mv -v /usr/share/doc/openssl /usr/share/doc/openssl-3.0.1
cp -vfr doc/* /usr/share/doc/openssl-3.0.1

### libelf from elfutils

goto_sources elfutils

./configure \
    --prefix=/usr                \
    --disable-debuginfod         \
    --enable-libdebuginfod=dummy

make $JOBS
make check
make -C libelf install $JOBS
install -vm644 config/libelf.pc /usr/lib/pkgconfig
rm /usr/lib/libelf.a
